generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// ユーザーテーブル
model User {
  id             Int        @id @default(autoincrement())
  name           String
  supabaseUserId String     @unique
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  talkRooms      TalkRoom[]
  talkKeywords   TalkKeyword[]
  recipes        Recipe[]
  favorites      UserFavoriteRecipe[]
}

// トークユーザー識別
enum UserStatus {
  USER
  CHEF
}

// トークテーブル
model Talk {
  id         Int        @id @default(autoincrement())
  content    String
  imageKey   String?
  userStatus UserStatus
  isReciped  Boolean
  deleted    Boolean
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  talkRoomId Int
  talkRoom   TalkRoom   @relation(fields: [talkRoomId], references: [id])
}

// トークルームテーブル
model TalkRoom {
  id        Int      @id @default(autoincrement())
  title     String
  talks     Talk[]
  isReciped Boolean
  deleted   Boolean
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [supabaseUserId])
}

// チャット入力補助ワードテーブル
model TalkKeyword {
  id              Int      @id @default(autoincrement())
  name            String
  keyword         String
  isAutoGenerated Boolean
  isDeleted       Boolean
  userId          String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [supabaseUserId])
}

// レシピテーブル
model Recipe {
  id            Int             @id @default(autoincrement())
  title         String
  point         String?
  cookingTime   String?
  ingredients   String
  instructions  String
  imageKey      String?
  tags          RecipeTagRelation[]
  favorites     UserFavoriteRecipe[]
  createdByUser String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  user          User            @relation(fields: [createdByUser], references: [supabaseUserId])
}

// レシピ表示用タグテーブル
model RecipeTag {
  id      Int                 @id @default(autoincrement())
  tag     String
  recipes RecipeTagRelation[]
}

// レシピとタグを多対多で紐づける中間テーブル
model RecipeTagRelation {
  id        Int       @id @default(autoincrement())
  recipeId  Int
  tagId     Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  recipe    Recipe    @relation(fields: [recipeId], references: [id])
  tag       RecipeTag @relation(fields: [tagId], references: [id])
}

// ユーザーとお気に入りレシピを多対多で紐づける中間テーブル
model UserFavoriteRecipe {
  id        Int      @id @default(autoincrement())
  userId    String
  recipeId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [supabaseUserId])
  recipe    Recipe   @relation(fields: [recipeId], references: [id])
}
